; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "pgAnalytics"
#define MyAppVersion "1.0"
#define MyAppPublisher "Dextra Sistemas"
#define MyAppURL "http://www.pganalytics.com.br/"
#define MyAppExeName "pganalytics"
#define MyAppExeService "pganalytics-agent.exe"
#define MyAppDescription "Coletor de informações para pgAnalytics"
#define MyAppService 'pgAnalytics'
#define BinDir "../../build-win32/pganalytics/"
#define AppGUID "{{6A6D6290-18BE-11E4-4B9E-080027CA96B0}"
;#define UPDATING

[Setup]
AppId={#AppGUID}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
AppCopyright=Copyright (c) {#MyAppPublisher} - Todos os direitos reservados
VersionInfoCompany={#MyAppPublisher}
;VersionInfoCopyright= same as AppCopyright
VersionInfoDescription={#MyAppDescription}
VersionInfoProductName={#MyAppName}
VersionInfoProductTextVersion={#MyAppVersion}
VersionInfoProductVersion={#MyAppVersion}
VersionInfoTextVersion={#MyAppVersion}
VersionInfoVersion={#MyAppVersion}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
OutputBaseFilename=setup_{#MyAppExeName}
OutputDir=output
Compression=lzma
SolidCompression=yes
;SetupIconFile=imagens\instala.ico
;WizardImageFile=imagens\setup.bmp
;WizardSmallImageFile=imagens\Setup.bmp
UninstallDisplayIcon={app}\{#MyAppExeName}
#ifdef UPDATING
UsePreviousAppDir=yes
CreateUninstallRegKey=no
UpdateUninstallLogAppName=no
#endif

[Languages]
Name: "pt_BR"; MessagesFile: "compiler:Languages\BrazilianPortuguese.isl"

[Messages]
pt_BR.BeveledLabel={#MyAppName} - {#MyAppPublisher}

[Tasks]
;Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: checkedonce
;Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: checkedonce; OnlyBelowVersion: 0,6.1

[Files]
Source: "{#BinDir}\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

[Icons]
Name: "{group}\{cm:ProgramOnTheWeb,{#MyAppName}}"; Filename: "{#MyAppURL}"
;Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
;Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: quicklaunchicon

[Run]
;Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, "&", "&&")}}"; Flags: nowait postinstall skipifsilent

[Code]
#include "WinServices.iss"

procedure ErrorInfo(const Title, Message, Info: String);
var
  Form: TSetupForm;    
  Lbl : TLabel;
  Memo: TNewMemo;          
  OKButton: TNewButton;
begin
  Form := CreateCustomForm();
  try
    Form.ClientWidth := ScaleX(380);
    Form.ClientHeight := ScaleY(256);
    Form.Caption := Title;
    Form.CenterInsideControl(WizardForm, False);

    Lbl := TLabel.Create(Form);
    Lbl.Parent := Form;
    Lbl.Top := ScaleX(5);
    Lbl.Left := ScaleY(10);
    Lbl.AutoSize := True;
    Lbl.Caption := Message;
    Lbl.WordWrap := True;

    Memo := TNewMemo.Create(Form);
    Memo.Parent := Form;
    Memo.ReadOnly := True;
    Memo.Top := Lbl.Top + Lbl.Height + ScaleX(5);
    Memo.Left := ScaleY(10);
    Memo.Width := Form.ClientWidth - ScaleY(20);
    Memo.Height := Form.ClientHeight - ScaleX(43) - (Lbl.Top + Lbl.Height + ScaleX(5));
    Memo.ScrollBars := ssVertical;
    Memo.Text := Info;

    OKButton := TNewButton.Create(Form);
    OKButton.Parent := Form;
    OKButton.Width := ScaleX(75);
    OKButton.Height := ScaleY(23);
    OKButton.Left := Form.ClientWidth - ScaleX(10 + 75); //ScaleX(75 + 6 + 75 + 10);
    OKButton.Top := Form.ClientHeight - ScaleY(23 + 10);
    OKButton.Caption := '&Ok';
    OKButton.ModalResult := mrOk;

    Form.ActiveControl := Memo;

    Form.ShowModal();
  finally
    Form.Free();
  end;
end;

procedure AboutButtonOnClick(Sender: TObject);
var
 S, L: String;
begin
L := chr(13) + chr(10)
S := 'Desenvolvido por Dextra Sistemas' + L
S := S + '    URL: http://www.pganalytics.com.br/' + L
S := S + '    e-mail: dba@pganalytics.com.br'
  MsgBox(S, mbInformation, mb_Ok);
end;

procedure URLLabelOnClick(Sender: TObject);
var
  ErrorCode: Integer;
begin
  ShellExec('open', '{#MyAppURL}', '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);
end;

procedure InitializeWizard;
var
  AboutButton, CancelButton: TButton;
  URLLabel: TNewStaticText;
begin
  CancelButton := WizardForm.CancelButton;

  AboutButton := TButton.Create(WizardForm);
  AboutButton.Left := WizardForm.ClientWidth - CancelButton.Left - CancelButton.Width;
  AboutButton.Top := CancelButton.Top;
  AboutButton.Width := CancelButton.Width;
  AboutButton.Height := CancelButton.Height;
  AboutButton.Caption := '&Sobre...';
  AboutButton.OnClick := @AboutButtonOnClick;
  AboutButton.Parent := WizardForm;

  URLLabel := TNewStaticText.Create(WizardForm);
  URLLabel.Caption := '{#MyAppPublisher}';
  URLLabel.Cursor := crHand;
  URLLabel.OnClick := @URLLabelOnClick;
  URLLabel.Parent := WizardForm;
  URLLabel.Font.Style := URLLabel.Font.Style + [fsUnderline];
  URLLabel.Font.Color := clBlue;
  URLLabel.Top := AboutButton.Top + AboutButton.Height - URLLabel.Height - 2;
  URLLabel.Left := AboutButton.Left + AboutButton.Width + ScaleX(20);
end;

procedure DoPreInstall();
begin
  if IsServiceInstalled('{#MyAppService}') then
  begin
    if IsServiceRunning('{#MyAppService}') then
    begin
      StopService('{#MyAppService}');
      while IsServiceRunning('{#MyAppService}') do
      begin
        Sleep(1);
      end;
    end;
    RemoveService('{#MyAppService}');
    while IsServiceInstalled('{#MyAppService}') do
    begin
      Sleep(1);
    end;
  end;
end;

procedure DoPostInstall();
var
  helpMsg : String;
  //configAppend: String;
begin
      if not IsServiceInstalled('{#MyAppService}') then
      begin
        if not InstallService(ExpandConstant('{app}\{#MyAppExeService}'), '{#MyAppService}', '{#MyAppService}', '{#MyAppDescription}', SERVICE_WIN32_OWN_PROCESS + SERVICE_INTERACTIVE_PROCESS, SERVICE_AUTO_START) then
          MsgBox('Erro ao instalar o serviço!' + helpMsg, mbError, mb_Ok)
        else
        begin
            //ShellExec('', ExpandConstant('{app}\{#MyAppExeService}'), 'configServiceFailure {#MyAppName}', '', SW_HIDE, ewWaitUntilTerminated, ErrorCode);
            if not StartService('{#MyAppService}') then
                MsgBox('Ocorreu um erro ao iniciar o serviço!' + helpMsg, mbError, mb_Ok);
        end;
      end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssInstall then begin
    DoPreInstall();
  end else if CurStep = ssPostInstall then begin
    DoPostInstall();
  end;
end;

function InitializeUninstall(): Boolean;
begin
    Result := True;
  if IsServiceInstalled('{#MyAppService}') then
  begin
    if IsServiceRunning('{#MyAppService}') then
    begin
      StopService('{#MyAppService}');
      while IsServiceRunning('{#MyAppService}') do
      begin
        Sleep(1);
      end;
    end;
    RemoveService('{#MyAppService}');
    while IsServiceInstalled('{#MyAppService}') do
    begin
      Sleep(1);
    end;
  end;
end;

